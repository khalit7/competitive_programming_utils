
from itertools import accumulate

class PrefixSum2D:
    def __init__(self, grid):
        # set class variables
        self.grid = grid
        self.n = len(self.grid)
        self.m = len(self.grid[0])

        # construct prefix sum array
        self.prefix_sum_2d = self.construct_prefix_sum()

    def construct_prefix_sum(self):
        # calculate prefix sum row wise
        self.grid.insert(0,[0]*self.m)
        for i in range(self.n+1):
            self.grid[i] = [0] + list( accumulate(self.grid[i]) )
        #
        prefix_sum_2d = [ [0]*(self.m+1) for _ in range(self.n+1)]
        for i in range(1,self.n+1):
            for j in range(1,self.m+1):
                prefix_sum_2d[i][j] = self.grid[i][j] + prefix_sum_2d[i-1][j]

        return prefix_sum_2d

    def sum_of_rectangle(self,i1,j1,i2,j2):
        # All indices are inclusive. You should always pass indices in the range(0,n-1) inclusive.
        # deal with this exactly as you would deal with a 1D prefix sum with a leading zero.
        return self.prefix_sum_2d[i1+1][j1+1] - self.prefix_sum_2d[i2][j1+1] - self.prefix_sum_2d[i1+1][j2] + self.prefix_sum_2d[i2][j2]
